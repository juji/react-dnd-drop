{"version":3,"sources":["../src/index.js"],"names":["React","Component","boxIntersect","ReactDOM","DnD","constructor","props","e","preventDefault","top","left","width","height","findDOMNode","elm","getBoundingClientRect","setState","dragging","deltaLeft","clientX","deltaTop","clientY","state","_intersect","dropAreas","getDropAreas","nullVal","filter","v","length","Error","bound","copy","right","bottom","overlaps","map","i","b","onDrop","render","overlayStyle","copyStyle","overlay","backgroundColor","position","zIndex","cursor","display","opacity","r","onMouseDown","children","onMouseMove","onMouseUp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport boxIntersect  from 'box-intersect';\nimport ReactDOM from 'react-dom'\n\nexport default class DnD extends Component {\n\n  constructor(props){\n\n    super(props);\n    this.state = {\n      dragging: false,\n      width: 0,\n      height: 0,\n      top: 0,\n      left: 0,\n      deltaTop:0,\n      deltaLeft:0\n    }\n\n    this.copy = null;\n    this.elm = null;\n\n  }\n\n  onMouseDown = (e) => {\n    e.preventDefault()\n    const { top, left, width, height } = ReactDOM.findDOMNode(this.elm).getBoundingClientRect();\n    this.setState({ top, left, width, height, \n      dragging: true,\n      deltaLeft: e.clientX - left,\n      deltaTop: e.clientY - top\n    })\n  }\n\n  onMouseMove = (e) => {\n    if(!this.state.dragging) return;\n    this.setState({\n      top: e.clientY - this.state.deltaTop,\n      left: e.clientX - this.state.deltaLeft\n    })\n  }\n\n  onMouseUp = () => {\n    if(!this.state.dragging) return;\n    this.setState({ dragging: false });\n    this._intersect();\n  }\n\n  _intersect = () => {\n\n    // check for null dropArea\n    const dropAreas = this.props.getDropAreas();\n\n    const nullVal = dropAreas.filter(v => !v);\n    if(nullVal.length) throw new Error('REACT-DND-DROP: dropArea Element cannot be empty');\n\n    const bound = ReactDOM.findDOMNode(this.copy).getBoundingClientRect();\n    const copy = [ bound.left, bound.top, bound.right, bound.bottom ];\n\n    // calc intersect\n    const overlaps = dropAreas.map((v,i) => {\n      const b = ReactDOM.findDOMNode(v).getBoundingClientRect();\n      return boxIntersect( [[ b.left, b.top, b.right, b.bottom ], copy] ).length ? i : null\n    }).filter(v => v!== null);\n\n    if(overlaps.length && overlaps)\n      this.props.onDrop( overlaps )\n  }\n\n  render(){\n    \n    const { dragging, width, height, top, left } = this.state;\n    const { overlayStyle, copyStyle } = this.props;\n\n    const overlay = {\n      backgroundColor:'transparent',\n      position:'fixed',\n      top:0,\n      left:0,\n      width:'100%',\n      height:'100%',\n      zIndex:'3000',\n      cursor:'grabbing',\n      ...(overlayStyle || {}),\n      display: dragging ? 'block' : 'none'\n    }\n\n    const copy = {\n      opacity:0.8,\n      position:'fixed',\n      zIndex:'3001',\n      cursor:'grabbing',\n      ...(copyStyle || {}),\n      display: dragging ? 'inline-block' : 'none',\n      width, height, top, left\n    }\n\n    return <div ref={r => this.elm = r} onMouseDown={this.onMouseDown} onTouchStart={this.onMouseDown}>\n      {this.props.children}\n      <div \n        onMouseMove={ dragging ? this.onMouseMove : null }\n        onTouchMove={ dragging ? this.onMouseMove : null }\n        onMouseUp={ dragging ? this.onMouseUp : null }\n        onTouchEnd={ dragging ? this.onMouseUp : null }\n        style={overlay}\n      >\n        <div ref={r => this.copy = r} style={copy}>\n          {this.props.children}\n        </div>\n      </div>\n    </div>\n\n  }\n\n}"],"file":"index.js"}